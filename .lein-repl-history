(use 'liberator-service.repl)
(start-server)
(def mappi [] {:a {:d 54 :b {:c 1000}}})
(def mappi {:a {:d 54 :b {:c 1000}}})
(get-in mappi :a :b :c)
(get-in mappi [:a :b :c])
(get-in mappi [:a :d])
(:use samutamm.handler)
(ns samutamm.test.handler
  (:use midje.sweet
        ring.mock.request
        samutamm.handler))
(app)
(app (:request :get "/"))
(app (request :get "/"))
(:body (app (request :get "/")))
(to_s (:body (app (request :get "/"))))
(slurp (:body (app (request :get "/"))))
exit
(:use samutamm.models.db)
(create-projects-table)
(ns samutamm.models.db)
(testi)
exit
(use 'samutamm.models.db :reload)
(testi)
(create-projects-table)
(add-project "testiproju" "descriptiona" "tagi, toinen" (java.util.Date) (java.util.Date))
(add-project "testiproju" "descriptiona" "tagi, toinen" (java.util.Date.) (java.util.Date.))
(add-project "1" "testiproju" "descriptiona" "tagi, toinen" (java.util.Date.) (java.util.Date.))
(add-project "1" "testiproju" "descriptiona" "tagi, toinen" (.getTime (java.util.Date.)) (.getTime (java.util.Date.)))
(add-project "1" "testiproju" "descriptiona" "tagi, toinen" (make.sql.date 2000 6 6) (make-sql-date 1992 8 27))
(add-project "1" "testiproju" "descriptiona" "tagi, toinen" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(make-sql-date)
(use 'samutamm.models.db :reload)
(make-sql-date 1999 9 9)
(add-project "1" "testiproju" "descriptiona" "tagi, toinen" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(get-project "1")
exit
(use 'samutamm.models.db)
(use 'samutamm.models.db :reload)
(testi)
(get-all-projects)
(use 'samutamm.models.db :reload)
(get-all-projects)
(use 'samutamm.models.db :reload)
(add-project "1" "testiproju" "descriptiona" "tagi, toinen, kolmas" (make.sql.date 2000 6 6) (make-sql-date 1992 8 27))
(add-project "1" "testiproju" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(getNextException)
(add-project "2" "testiproju2" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(use 'samutamm.models.db :reload)
(add-project "2" "testiproju2" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(use 'samutamm.models.db :reload)
(add-project "2" "testiproju2" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(use 'samutamm.models.db :reload)
(add-project "2" "testiproju2" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(use 'samutamm.models.db :reload)
(update-project "2" "testiproju2" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(update-project "2" "proju2" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(get-all-projects)
 {:projectname projectname 
       :description description
       :tags tags
       :projectstart projectstart
       :projectend projectend
       }
(def a 4)
a
(def a {:eka "ensimm√§inen" :toka "deuxieme"})
(assoc a "shit")
a
(assoc a :toka "shit")
a
(use 'samutamm.models.db :reload)
(add-project "3" "kolmonen!" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(uppdate-project "3" "kolmonen :(" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(update-project "3" "kolmonen :(" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(use 'samutamm.models.db :reload)
(update-project "3" "kolmonen :(" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(get-project "3")
(update-project "4" "nelkku" "descriptiona" "tagi, toinen, kolmas" (make-sql-date 2000 6 6) (make-sql-date 1992 8 27))
(get-all-projects)
(count (get-all-projects))
(use 'samutamm.test.models.db)
(use 'samutamm.test.models.db :reload)
exit
(use 'samutamm.test.models.db :reload)
(use 'samutamm.test.models.db-test :reload)
(use 'samutamm.test.models.db_test :reload)
(use 'samutamm.test.models.db :reload)
(midje)
(doc midje)
(load-facts)
(autotest :pause)
(autotest :resume)
(def testi [param])
(def testi [param] (if (nil? param) "ei parametria" "parametri"))
(def testi [param] (if (nil? param) "ei parametria" "parametri")))
(defn testi [param] (if (nil? param) "ei parametria" "parametri")))
(def testi [param] (if (nil? param) "ei parametria" "parametri"))
(defn testi [param] (if (nil? param) "ei parametria" "parametri"))
(testi)
(testi "a")
(testi "")
(defn testi ([] "ei parametria")([param] "parametri"))
(testi)
(testi :billu)
(def is-dev-db (atom true))
is-dev-db
(if is-dev-db)
(if is-dev-db "on" "ei")
(assoc is-dev-db false)
(reset! is-dev-db false)
(if is-dev-db "on" "ei")
is-dev-db
(if is-dev-db "on" "ei")
(if (is-dev-db) "on" "ei")
(if (true is-dev-db) "on" "ei")
(if @is-dev-db "on" "ei")
(reset! is-dev-db true)
(if @is-dev-db "on" "ei")
(def db (or (System/getenv "DATABASE_URL")
        {:subprotocol "postgresql"
         :subname (if @is-dev-db 
                    "//localhost/projects"
                    "//localhost/testprojects")
         :user "admin"
(def is-dev-db (atom true))
(def db         {:subprotocol "postgresql"
         :subname (if @is-dev-db 
                    "//localhost/projects"
                    "//localhost/testprojects")
         :user "admin"
         :password "admin"})
(:subname db)
(reset! is-dev-db false)
(:subname db)
(def mappi {:a 99})
(assoc mappi :a 33)
mappi
(mappi)
(assoc! mappi :a 33)
(mappi)
(assoc mappi :a 33)
mappi
(alter-var-root #'mappi {:b 44})
mappi
(def mappi {:a 99})
(alter-var-root #'mappi (fn [m] (assoc m :a 33)))
mappi
(def test-db   {:subprotocol "postgresql"
                 :subname "//localhost/testprojects"
                 :user "admin"
                 :password "admin"})
(use 'samutamm.models.db)
(create-projects-table test-db)
